virtual table/vtable/virtual function table/virtual method table/dispatch table

the virtual table is a lookup table of functions used to resolve function calls in a dynamic/late binding manner.

1.  class has virtual function(derived from a class that uses virtual functions)    &
    static array    &
    compiler sets up at compile time    &
    point to the most-derived function accessible by that class
2.  compiler adds a hidden pointer to the base class, *__vptr. *__vptr is set when a class instance is created so that it points to the virtual table for that class.
    unlike the *this pointer, which is actually a function parameter. *__vptr is a real pointer.
    it makes each class object allocated bigger by the size of one pointer,
    *__vptr is also inherited by derived classes.

a virtual table(a static array that the compiler sets up at compile time):
    entry1: for virtual function1 that can be called by objects of the class / a function pointer that points to the most-derived function
    entry2: for virtual function2 that can be called by objects of the class /
    ...
    entryn: for virtual functionn that can be called by objects of the class /

*__vptr : is set when a class instance is created so that it points to the virtual table for that class.


pure virtual function(or abstract function):
    acts as a placeholder that is meant to be redefined by derived class.
    
pure virtual function with two main consequences:
    any class with one or more pure virtual function becomes an abstract base class, which means that it can not be instantiated
    any derived class must define a body for this function, or that derived class will be considered an abstract base class as well.
    
when providing a body for a pure virtual function, the body must be provided separately(not inline). the function is also a pure virtual function.

an interface class is a class that has no member variables, and where all of the functions are pure virtual.

class 1;
class 2:virtual public 1
class 3:virtual public 1
class 4:public 2,public 3
virtual base class:
    1.virtual base class are always created before non-virtual base classes
    2.class 2 and class 3 constructors still have calls to the class 1 constructor.
      when creating an instance of class 4, these constructor calls are simply ignored because class 4 is responsible for creating the class 1,
      not class 2 and class 3. However, if we were to create an instance of class 2 or class 3, those constructor calls would be used, and normal inheritance rules apply.
    3.the most derived class is responsible for constructing the virtual base class.
    4.a virtual base class is always considered a direct base of its most derived class, but classes inheriting the virtual base still need access to it.
      so in order to facilitate this, the compiler creates a virtual table for each class directly inheriting the virtual class.

dynamic_cast:
    convert base* to derive*
    base must has a  polymorphic type










