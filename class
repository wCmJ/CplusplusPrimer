constructors actually serve two purposes.
    the primary purpose is to initialize objects that have just been created.
    the secondary purpose is to determine whether creation of an object is allowed.
    an object of a class can only be created if a matching constructor can be found.
    this means that a class without any public constructors can't be created.
    ocnstructors are only intended to be used for initialization when the object is created.
    
initialize:
    copy initialize
    direct initialize
    uniform initialize(brace initialize)

class Foo
{
    public:
        Foo()
        {}
        Foo(int value):Foo()
        {}
        or 
        Foo(int value)
        {
            Foo();
        }
}
prior to C++11, calling a constructor explicitly from another constructor creates a temporary object, initializes the temporary object using the constructor, and then discards it, leaving your original object unchanged.

int **array = new int*[10];
array[1] = new int[5];

Global variables are constructed before main() and destroyed after main().
if you use the exit() function, your program will terminate and no destructors will be called.

simple.setID(2)  ==  setID(&simple,2)
void setID(int id){m_id = id;}
void setID(Simple* const this, int id){this->m_id = id;}
    
class definitions in header file.
any other header or code file that wants to use the Date class can simply #inlcude.
Note that the cpp also needs to be compiled into any project that uses this header file so the linker knows how class is implemented.

It turns out that const class objects can only explicitly call const member functions.
to make a function to a const member function,
int getValue() const{return m_value;}
default parameters can only be used once.
const keyword must be used on both the function prototype in the class definition and on the function definition.

static members are created when the program starts, and destroyed when the program ends.
const members can be initialized inside the class definition.


. :: ?:

class Cents
{
    friend Cents operator+(const Cents &c1,int value);
    friend Cents operator+(int value,const Cents &c1);
};
operator<< and operator+ only has two parameters.    
    
std::ostream& operator<<()
{

}
    
    
    
    
    
    
    
